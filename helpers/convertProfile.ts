import { Profile, ServerProfile } from '@/interface/profile';
import { Decimals } from '@/constant/decimals';

export const convertFromServerProfile = (data: ServerProfile[]): Profile[] => {
    return data.map(
        ({
            caliber,
            rTwist,
            twistDir,
            scHeight,
            bcType,
            cZeroAirPressure,
            cZeroAirHumidity,
            zeroX,
            cZeroDistanceIdx,
            distances,
            cZeroAirTemperature,
            cZeroTemperature,
            cZeroPTemperature,
            zeroY,
            cZeroWPitch,
            bWeight,
            bLength,
            bDiameter,
            profileName,
            cartridgeName,
            bulletName,
            shortNameTop,
            shortNameBot,
            fileName,
            cTCoeff,
            cMuzzleVelocity,
            userNote,
            switches,
            coefRows,
            deviceUuid,
        }) => ({
            caliber,
            rTwist: rTwist / Decimals.rTwist,
            twistDir,
            scHeight,
            bcType,
            cZeroAirPressure: cZeroAirPressure / Decimals.cZeroAirPressure,
            cZeroAirHumidity,
            cZeroDistanceIdx,
            distances: distances.map(el => el / Decimals.distances),
            cZeroAirTemperature,
            cZeroTemperature,
            cZeroPTemperature,
            cZeroWPitch,
            profileName,
            cartridgeName,
            bulletName,
            shortNameTop,
            shortNameBot,
            fileName,
            cTCoeff: cTCoeff / Decimals.cTCoeff,
            cMuzzleVelocity: cMuzzleVelocity / Decimals.cMuzzleVelocity,
            userNote,
            switches: switches.map(el => ({ ...el, distance: el.distance / Decimals.distances })),
            coefG1:
                bcType === 'G1'
                    ? coefRows.map(({ bcCd, mv }) => ({
                          bcCd: bcCd / Decimals.bcCd,
                          mv: mv / Decimals.mv,
                      }))
                    : [],
            coefG7:
                bcType === 'G7'
                    ? coefRows.map(({ bcCd, mv }) => ({
                          bcCd: bcCd / Decimals.bcCd,
                          mv: mv / Decimals.mv,
                      }))
                    : [],
            coefCustom: [],
            deviceUuid,
            bWeight: bWeight / Decimals.bWeight,
            bLength: bLength / Decimals.bLength,
            bDiameter: bDiameter / Decimals.bDiameter,
            zeroY: zeroY / Decimals.zeroY,
            zeroX: zeroX / Decimals.zeroX,
        }),
    );
};

export const convertToServerProfile = (data: Profile[]): ServerProfile[] => {
    return data.map(
        ({
            caliber,
            rTwist,
            twistDir,
            scHeight,
            bcType,
            cZeroAirPressure,
            cZeroAirHumidity,
            zeroX,
            cZeroDistanceIdx,
            distances,
            cZeroAirTemperature,
            cZeroTemperature,
            cZeroPTemperature,
            zeroY,
            cZeroWPitch,
            bWeight,
            bLength,
            bDiameter,
            profileName,
            cartridgeName,
            bulletName,
            shortNameTop,
            shortNameBot,
            fileName,
            cTCoeff,
            cMuzzleVelocity,
            userNote,
            switches,
            coefG1,
            coefG7,
            deviceUuid,
        }) => ({
            fileName,
            caliber,
            rTwist: rTwist * Decimals.rTwist,
            profileName,
            bcType,
            cZeroAirPressure: cZeroAirPressure * Decimals.cZeroAirPressure,
            cZeroAirHumidity,
            cTCoeff: cTCoeff * Decimals.cTCoeff,
            cZeroDistanceIdx,
            cZeroWPitch: cZeroWPitch * Decimals.cZeroPitch,
            cZeroAirTemperature,
            cZeroTemperature,
            cMuzzleVelocity: cMuzzleVelocity * Decimals.cMuzzleVelocity,
            cZeroPTemperature,
            cartridgeName,
            scHeight,
            shortNameTop,
            switches: switches.map(el => ({ ...el, distance: el.distance * Decimals.distances })),
            shortNameBot,
            distances: distances.map(el => el * Decimals.distances),
            userNote,
            twistDir,
            bWeight: bWeight * Decimals.bWeight,
            bLength: bLength * Decimals.bLength,
            bDiameter: bDiameter * Decimals.bDiameter,
            bulletName,
            zeroY: zeroY * Decimals.zeroY,
            zeroX: zeroX * Decimals.zeroX,
            coefRows:
                bcType === 'G1'
                    ? coefG1.map(({ bcCd, mv }) => ({
                          bcCd: bcCd * Decimals.bcCd,
                          mv: mv * Decimals.mv,
                      }))
                    : coefG7.map(({ bcCd, mv }) => ({
                          bcCd: bcCd * Decimals.bcCd,
                          mv: mv * Decimals.mv,
                      })),
            deviceUuid,
        }),
    );
};
